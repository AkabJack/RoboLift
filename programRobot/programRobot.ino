#include <U8glib.h>		// driver pentru ecranul OLED -> conectiune i2c
						          //https://github.com/olikraus/u8glib
#define inMotor1    2//PD2  
#define inMotor2    3//PD3
#define inMotor3    4//PD4
#define inMotor4    5//PD5
#define motorLift   6//PD6


#define servo       10//PB2
#define buttonLift  11//PB3
#define OLED_SCL    A5//PC6, no need to initialise the pins, the driver does all the work
#define OLED_SDA    A4//PC5
//UART INTRF = 1 = TX; 2 = RX;


#define F_CPU        16000000L          //SYSTEM CLOCK FREQUENCY
#define BAUDRATE    115200              //BAUDRATE OF THE UART INTERFACE
#define UBBR_VALUE  ((F_CPU/16/BAUDRATE))//UBBR REGISTER VALUE

#define picture_width   60
#define picture_height  40

/*Robot commands 1-> 5
    back       = 1;
    front      = 2;
    left       = 3;
    right      = 4;
    candy drop = 5;
*/

U8GLIB_SSD1306_128X64 u8g(U8G_I2C_OPT_FAST);

void pins_init();
void servo_init();
void uart_init();
uint8_t uart_receive_char();
void uart_transmit_char(uint8_t data);

int buttonStateLift = 0;
char c;

static unsigned char candy_picture[] U8G_PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0xC0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x40, 0x04, 0xC0, 0x0F, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x09, 0x60, 0x1D, 
	0x00, 0x00, 0x00, 0x00, 0x20, 0x08, 0x38, 0xF8, 0x01, 0x00, 0x00, 0x00, 
	0x20, 0x10, 0x1C, 0xFC, 0x3F, 0x00, 0x00, 0x00, 0x40, 0xA0, 0x0C, 0xFE, 
	0xC3, 0x00, 0x00, 0x00, 0x60, 0xE0, 0x87, 0x7F, 0xC0, 0x01, 0x00, 0x00, 
	0x10, 0xE0, 0x81, 0x3F, 0xC0, 0x07, 0x00, 0x00, 0x08, 0xC0, 0xC0, 0x3F, 
	0xF0, 0x0F, 0x00, 0x00, 0x10, 0xA0, 0xE0, 0x0F, 0xF8, 0x1F, 0x00, 0x00, 
	0x08, 0xC0, 0xF0, 0x07, 0xF8, 0x23, 0x00, 0x00, 0x10, 0x60, 0xF0, 0x07, 
	0xFC, 0x41, 0x00, 0x00, 0x30, 0x20, 0xF8, 0x03, 0xFE, 0xE0, 0x00, 0x00, 
	0x08, 0x10, 0xFC, 0x01, 0xFF, 0xE0, 0x00, 0x00, 0x08, 0x1E, 0xFE, 0x01, 
	0x7F, 0xF0, 0x00, 0x00, 0x04, 0x00, 0xFE, 0x00, 0x7F, 0xF0, 0x60, 0x03, 
	0x54, 0x10, 0xFF, 0xC0, 0x3F, 0xF0, 0x7C, 0x02, 0x04, 0x8F, 0x7F, 0xC0, 
	0x3F, 0xF8, 0x36, 0x05, 0xF8, 0x89, 0x3F, 0xE0, 0x1F, 0xF8, 0x80, 0x05, 
	0x00, 0xC8, 0x1F, 0xE0, 0x0F, 0xFC, 0x00, 0x04, 0x00, 0xC8, 0x1F, 0xF0, 
	0x0F, 0xFE, 0x05, 0x02, 0x00, 0xC8, 0x0F, 0xF8, 0x07, 0x7E, 0x00, 0x06, 
	0x00, 0xE8, 0x0F, 0xFC, 0x03, 0x7E, 0x81, 0x02, 0x00, 0xF0, 0x07, 0xFC, 
	0x03, 0x3F, 0x03, 0x02, 0x00, 0xE0, 0x03, 0xFE, 0x01, 0x7F, 0x00, 0x01, 
	0x00, 0xE0, 0x07, 0xFE, 0x80, 0xBF, 0x01, 0x02, 0x00, 0xC0, 0x03, 0x7F, 
	0xC0, 0x2F, 0x80, 0x01, 0x00, 0x80, 0x07, 0x7F, 0xE0, 0x1F, 0xC0, 0x01, 
	0x00, 0x00, 0x1C, 0x3F, 0xE0, 0x4F, 0x60, 0x01, 0x00, 0x00, 0xE0, 0x3F, 
	0xF8, 0x8F, 0x20, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFC, 0x87, 0x20, 0x00, 
	0x00, 0x00, 0x00, 0x18, 0xFC, 0x03, 0x21, 0x00, 0x00, 0x00, 0x00, 0xE0, 
	0xFC, 0x03, 0x21, 0x00, 0x00, 0x00, 0x00, 0x80, 0xFF, 0x00, 0x22, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, };

static unsigned char stop_picture[] U8G_PROGMEM = {
  0x00, 0x00, 0x80, 0xFF, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xFF, 
  0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0xFF, 0xFF, 0x01, 0x00, 0x00, 
  0x00, 0x00, 0xFC, 0xFF, 0xFF, 0x03, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 
  0xFF, 0x0F, 0x00, 0x00, 0x00, 0x80, 0xFF, 0xFF, 0xFF, 0x1F, 0x00, 0x00, 
  0x00, 0xC0, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0x00, 0xC0, 0xFF, 0xFF, 
  0xFF, 0x3F, 0x00, 0x00, 0x00, 0xE0, 0xFF, 0xFF, 0xFF, 0x7F, 0x00, 0x00, 
  0x00, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0xF0, 0xFF, 0xFF, 
  0xFF, 0xFF, 0x00, 0x00, 0x00, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 
  0x00, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x00, 0xFC, 0xFF, 0xFF, 
  0xFF, 0xFF, 0x03, 0x00, 0x00, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0x00, 
  0x00, 0xFC, 0x00, 0x00, 0x00, 0xF0, 0x03, 0x00, 0x00, 0xFC, 0x00, 0x00, 
  0x00, 0xF0, 0x03, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x00, 0xF0, 0x03, 0x00, 
  0x00, 0xFC, 0x00, 0x00, 0x00, 0xF0, 0x03, 0x00, 0x00, 0xFC, 0x00, 0x00, 
  0x00, 0xF0, 0x03, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x00, 0xF0, 0x03, 0x00, 
  0x00, 0xFC, 0x00, 0x00, 0x00, 0xF0, 0x03, 0x00, 0x00, 0xFC, 0x00, 0x00, 
  0x00, 0xF0, 0x03, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x00, 0xF0, 0x03, 0x00, 
  0x00, 0xFC, 0x00, 0x00, 0x00, 0xF0, 0x03, 0x00, 0x00, 0xFC, 0xFF, 0xFF, 
  0xFF, 0xFF, 0x03, 0x00, 0x00, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0x00, 
  0x00, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x00, 0xF8, 0xFF, 0xFF, 
  0xFF, 0xFF, 0x01, 0x00, 0x00, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 
  0x00, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0xE0, 0xFF, 0xFF, 
  0xFF, 0x7F, 0x00, 0x00, 0x00, 0xC0, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 
  0x00, 0xC0, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0x00, 0x80, 0xFF, 0xFF, 
  0xFF, 0x1F, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x0F, 0x00, 0x00, 
  0x00, 0x00, 0xFC, 0xFF, 0xFF, 0x03, 0x00, 0x00, 0x00, 0x00, 0xF8, 0xFF, 
  0xFF, 0x01, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xFF, 0x7F, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x80, 0xFF, 0x1F, 0x00, 0x00, 0x00, };

void setup() {
  pins_init();
  uart_init();
  servo_init();
  drawScreen(7);//draw the stop screen
  c = 0;
}

void loop() {
  c = uart_receive_char();
  stop();
  if(c == '1'){
    inapoi();
  }
  if(c == '2'){
    inainte();
  }
  if(c == '3'){
    dreapta();
  }
  if(c == '4'){
    stanga();
  }
  if(c == '5'){
    drawScreen(c);
    servo_set(0x1388);
    delay(500);
    servo_set(0x7D0);
    delay(1000);
    while(!(PINB & 0x8)){//select the elevator button
      digitalWrite(motorLift, HIGH);// "Pornim" motorul
      PORTD = (PORTD | 0x40);//start the motor
    }
    c = '7';//overide the value to ensure that this sequence will not run for more than one time
    uart_transmit_char(c);
    PORTD = (PORTD & 0xBF);//deactivate the motor
  }
  if (c == '7'){
    stop();
  }
  drawScreen(c);
  
}

void uart_init(){//spec sheet, page 160~
  // Set the baud rate
  UBRR0H = (uint8_t)(UBBR_VALUE>>8);
  UBRR0L = (uint8_t)UBBR_VALUE;
  // Enable receiver and transmitter
  UCSR0B = 0x18;
  // Set frame format: 8 data bits, 1 stop bit, no parity
  UCSR0C = 0x7;//0x6
}

void uart_transmit_char(uint8_t data) {
  while (!(UCSR0A & (1<<5)));//select bit 5
  UDR0 = data;
}

uint8_t uart_receive_char(void) {
  while (!(UCSR0A & (1<<7)));//select bit 7
  return UDR0;
}

void servo_init(){
  TCCR1A = 0x22;      //Enable OC1B, set WGM11 for Fast PWM Mode
  TCCR1B = 0x1A;      //Fast PWM, TOP = ICR1, prescaler = 8
  ICR1   = 0x9C3F;    //20 ms (or 50Hz) period with the prescaler and the system clock
  OCR1B  = 0x7D0;     // ~ 0 degrees
  //DDRB  |= (1<<PB2);  //set the PB2 pin as output (D10 on the Arduino Nano)
}

void servo_set(uint16_t value){//maximum 0x9C3F as 20ms 
  OCR1B  = value;
}

void pins_init(){
  DDRD  = 0x7C;//inMotor1,inMotor2,inMotor3,inMotor4,motorLift as outputs
  DDRB  = 0x4;  //set the PB2 pin as output (D10 on the Arduino Nano)
}

void drawScreen(char i){
		// picture loop
		u8g.firstPage();  
		do {
			switch(i){
				case '2':drawInainte(); break;
				case '1':drawInapoi(); break;
				case '4':drawDreapta(); break;
				case '3':drawStanga(); break;
				case '5':drawCandy(); break;
        default:drawStop(); break;
			}
		} while( u8g.nextPage() );
    delay(20);
	}

void drawCandy() {
	u8g.setFont(u8g_font_unifont);
	u8g.drawStr( 25, 11, "Candy time");
	u8g.drawXBMP(35,20, picture_width,picture_height,candy_picture);
}
void drawStop() {
	u8g.setFont(u8g_font_unifont);
	u8g.drawStr( 45, 11, "STOP");
	u8g.drawXBMP(35,20, picture_width,picture_height,stop_picture);
}
void drawStanga() {
	u8g.setFont(u8g_font_unifont);
	u8g.drawStr( 42, 11, "Stanga");
	u8g.drawBox(38,30,60,10);
	u8g.drawTriangle(40, 20,40, 50,25,35);
}
	
void drawDreapta() {
	u8g.setFont(u8g_font_unifont);
	u8g.drawStr( 40, 11, "Dreapta");
	u8g.drawBox(38,30,60,10);
	u8g.drawTriangle(90, 20,90, 50,105,35);
}
	
void drawInapoi() {
	u8g.setFont(u8g_font_unifont);
	u8g.drawStr( 40, 11, "Inapoi");
	u8g.drawBox(58,30,15,30);
	u8g.drawTriangle(50, 30,81, 30,65,15);
}
	
void drawInainte() {
	u8g.setFont(u8g_font_unifont);
	u8g.drawStr( 35, 11, "Inainte");
	u8g.drawBox(58,20,15,30);
	u8g.drawTriangle(50, 45,80, 45,65,60);
}

void inainte(){//010100 = 0x20
  PORTD = ((PORTD & 0xEB) | 0x14);//ativate and deactivate the important pins
}
void inapoi(){//101000 = 0x28
  PORTD = ((PORTD & 0xD7) | 0x28);//ativate and deactivate the important pins
}
void stanga(){//011000 = 0x18
  PORTD = ((PORTD & 0xE7) | 0x18);//ativate and deactivate the important pins
}
void dreapta(){//100100 = 0x24
  PORTD = ((PORTD & 0xDB) | 0x24);//ativate and deactivate the important pins
}
void stop(){//000000 = 0x0
  PORTD = (PORTD & 0xC3);//ativate and deactivate the important pins
}
